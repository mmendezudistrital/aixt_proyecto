{
	// time module
	"snippet.aixt.sleep": {
		"prefix": "sleep",
		"body": "${1|sleep,sleep_ms,sleep_us|}($2:10)",
		"description": "Sleep functions"
	},
	"snippet.aixt.time.sleep": {
		"prefix": "time.sleep",
		"body": "time.${1|sleep,sleep_ms,sleep_us|}($2:10)",
		"description": "Sleep functions with time prefix"
	},
	// pin module
	"snippet.aixt.pin.high": {
		"prefix": "pin.high",
		"body": "pin.high(pin.${1|a,b,c,e|}${2:0})",
		"description": "Pin high level function"
	},
	"snippet.aixt.pin.low": {
		"prefix": "pin.low",
		"body": "pin.low(pin.${1|a,b,c,e|}${2:0})",
		"description": "Pin low level function"
	},
	"snippet.aixt.pin.toggle": {
		"prefix": "pin.toggle",
		"body": "pin.toggle(pin.${1|a,b,c,e|}${2:0})",
		"description": "Pin toggle level function"
	},
	"snippet.aixt.pin.write": {
		"prefix": "pin.write",
		"body": "pin.write(pin.${1|a,b,c,e|}${2:0}, ${3:1})",
		"description": "Pin writing function"
	},
	"snippet.aixt.pin.read": {
		"prefix": "pin.read",
		"body": "pin.read(pin.${1|a,b,c,e|}${2:0})",
		"description": "pin reading function"
	},
	"snippet.aixt.pin.setup": {
		"prefix": "pin.setup",
		"body": "pin.setup(pin.${1|a,b,c,e|}${2:0}, pin.${3|input,output|})",
		"description": "Pin setup function"
	},
	// port module
	"snippet.aixt.port.write": {
		"prefix": "port.write",
		"body": "port.write(port.${1|a,b,c,e|}, ${2:10})",
		"description": "Port writing function"
	},
	"snippet.aixt.port.read": {
		"prefix": "port.read",
		"body": "port.read(port.${1|a,b,c,e|})",
		"description": "Port reading function"
	},
	"snippet.aixt.port.setup": {
		"prefix": "port.setup",
		"body": "port.setup(port.${1|a,b,c,e|}, port.${2|all_inputs,all_outputs,0x0F,0b00001111|})",
		"description": "Port setup function"
	},
	// adc module	
	"snippet.aixt.adc.an_in": {
		"prefix": "adc.an_in",
		"body": "adc.${1|in0,in1,in2,in3,in4,in5,in6,in7,in8,in9,in10,in11,in12,in13,in14,in15|}",
		"description": "ADC analog input setup constant"
	},
	"snippet.aixt.adc.read": {
		"prefix": "adc.read",
		"body": "adc.read(adc.${1|ch0,ch1,ch2,ch3,ch4,ch5,ch6,ch7,ch8,ch9,ch10,ch11,ch12,ch13,ch14,ch15|})",
		"description": "ADC reading function"
	},
	"snippet.aixt.adc.read_byte": {
		"prefix": "adc.read_byte",
		"body": "adc.read_byte(adc.${1|ch0,ch1,ch2,ch3,ch4,ch5,ch6,ch7,ch8,ch9,ch10,ch11,ch12,ch13,ch14,ch15|})",
		"description": "ADC byte reading function"
	},	
	"snippet.aixt.adc.setup": {
		"prefix": "adc.setup",
		"body": [
			"adc.setup(",
			"\tadc.${1|in0,in1,in2,in3,in4,in5,in6,in7,in8,in9,in10,in11,in12,in13,in14,in15|},",
			"\tadc.${2|f_30ksps_1mhz,f_30ksps_4mhz,f_18ksps_8mhz,f_21ksps_10mhz,f_24ksps_12mhz,f_30ksps_16mhz,f_34ksps_20mhz,f_18ksps_irc|},",
			"\tadc.${3|bits_8,bits_10|}",
			")",
		],
		"description": "ADC setup function"
	},
	// pwm module
	"snippet.aixt.pwm.write": {
		"prefix": "pwm.write",
		"body": "pwm.write(pwm.${1|ch1,ch2|}, ${2:duty})",
		"description": "PWM writing function"
	},
	"snippet.aixt.pwm.setup": {
		"prefix": "pwm.setup",
		"body": "pwm.setup(pwm.${1})",
		"description": "PWM setup function"
	},
	// uart module
	"snippet.aixt.uart.write": {
		"prefix": "uart.write",
		"body": "${1|uart,sw_uart|}.write($2)",
		"description": "UART character writing function"
	},
	"snippet.aixt.uart.print": {
		"prefix": "uart.print",
		"body": "${1|uart,sw_uart|}.print($2)",
		"description": "UART printing string function"
	},
	"snippet.aixt.uart.println": {
		"prefix": "uart.println",
		"body": "${1|uart,sw_uart|}.println($2)",
		"description": "UART printing string + line new function"
	},
	"snippet.aixt.uart.read": {
		"prefix": "uart.read",
		"body": "${1|uart,sw_uart|}.read()",
		"description": "UART character reading function"
	},
	"snippet.aixt.uart.input": {
		"prefix": "uart.input",
		"body": "${1|uart,sw_uart|}.input(${2:input : })",
		"description": "UART capturing string function"
	},
	"snippet.aixt.uart.setup": {
		"prefix": "uart.setup",
		"body": "${1|uart,sw_uart|}.setup(${2:115200})",
		"description": "Generic module setup function"
	},
  }