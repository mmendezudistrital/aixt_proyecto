{
	// time module
	"snippet.aixt.time.sleep": {
		"prefix": "tim",
		"body": "time.${1|sleep,sleep_ms,sleep_us|}(${2:time})",
		"description": "Time functions"
	},
	// pin module
	"snippet.aixt.pin.setup": {
		"prefix": "st",
		"body": "pin.setup(pin.${1|a,b,c,d,e,f,g|}${2:0}, pin.${3|input,output,in_pullup,in_pulldown|})",
		"description": "Pin setup level function"
	},
	"snippet.aixt.pin.high": {
		"prefix": "hi",
		"body": "pin.high(pin.${1|a,b,c,d,e,f,g|}${2:0})",
		"description": "Pin high level function"
	},
	"snippet.aixt.pin.low": {
		"prefix": "lo",
		"body": "pin.low(pin.${1|a,b,c,d,e,f,g|}${2:0})",
		"description": "Pin low level function"
	},
	"snippet.aixt.pin.toggle": {
		"prefix": "to",
		"body": "pin.toggle(pin.${1|a,b,c,d,e,f,g|}${2:0})",
		"description": "Pin toggle level function"
	},
	"snippet.aixt.pin.write": {
		"prefix": "wr",
		"body": "pin.write(pin.${1|a,b,c,d,e,f,g|}${2:0}, ${3:1})",
		"description": "Pin writing function"
	},
	"snippet.aixt.pin.read": {
		"prefix": "rd",
		"body": "pin.read(pin.${1|a,b,c,d,e,f,g|}${2:0})",
		"description": "pin reading function"
	},
	// port module
	"snippet.aixt.port.setup": {
		"prefix": "stp",
		"body": "port.setup(port.${1|a,b,c,d,e,f,g|}, port.${2|all_inputs,all_outputs,0x00FF,0b0000000011111111|})",
		"description": "16-bit port setup function"
	},
	"snippet.aixt.port.read": {
		"prefix": "rdp",
		"body": "port.read(port.${1|a,b,c,d,e,f,g|})",
		"description": "16-bit port reading function"
	},
	"snippet.aixt.port.write": {
		"prefix": "wrp",
		"body": "port.write(port.${1|a,b,c,d,e,f,g|}, ${2:10})",
		"description": "16-bit port writing function"
	},
	// adc module		
	"snippet.aixt.adc.setup": {
		"prefix": "sta",
		"body": "adc.setup(adc.${1|in0,in1,in2,in3,in4,in5,in6,in7,in8,in9,in10,in11,in12,in13,in14,in15|}, ${2:20_000})",
		"description": "ADC setup function"
	},
	"snippet.aixt.adc.read": {
		"prefix": "rda",
		"body": "adc.read(adc.${1|ch0,ch1,ch2,ch3,ch4,ch5,ch6,ch7,ch8,ch9,ch10,ch11,ch12,ch13,ch14,ch15|})",
		"description": "ADC reading function"
	},
	"snippet.aixt.adc.read_byte": {
		"prefix": "rdba",
		"body": "adc.read_byte(adc.${1|ch0,ch1,ch2,ch3,ch4,ch5,ch6,ch7,ch8,ch9,ch10,ch11,ch12,ch13,ch14,ch15|})",
		"description": "ADC byte reading function"
	},
	"snippet.aixt.adc.an_in": {
		"prefix": "pa",
		"body": "adc.${1|in0,in1,in2,in3,in4,in5,in6,in7,in8,in9,in10,in11,in12,in13,in14,in15|}",
		"description": "ADC analog input setup constant"
	},
	// pwm module
	"snippet.aixt.pwm.setup": {
		"prefix": "stpw",
		"body": "pwm.setup(pwm.${1})",
		"description": "PWM setup function"
	},
	"snippet.aixt.pwm.write": {
		"prefix": "wrpw",
		"body": "pwm.write(pwm.${1|ch1,ch2|}, ${2:duty})",
		"description": "PWM writing function"
	},
	// uart module
	"snippet.aixt.uart.setup": {
		"prefix": "stu",
		"body": "${1|uart,uart2,sw_uart|}.setup(${2:115200})",
		"description": "Generic module setup function"
	},
	"snippet.aixt.uart.write": {
		"prefix": "wru",
		"body": "${1|uart,uart2,sw_uart|}.write($2)",
		"description": "UART character writing function"
	},
	"snippet.aixt.uart.print": {
		"prefix": "pru",
		"body": "${1|uart,uart2,sw_uart|}.print($2)",
		"description": "UART printing string function"
	},
	"snippet.aixt.uart.println": {
		"prefix": "prlu",
		"body": "${1|uart,uart2,sw_uart|}.println($2)",
		"description": "UART printing string + line new function"
	},
	"snippet.aixt.uart.read": {
		"prefix": "rdu",
		"body": "${1|uart,uart2,sw_uart|}.read()",
		"description": "UART character reading function"
	},
	"snippet.aixt.uart.input": {
		"prefix": "inu",
		"body": "${1|uart,uart2,sw_uart|}.input(${2:input : })",
		"description": "UART capturing string function"
	},
  }
