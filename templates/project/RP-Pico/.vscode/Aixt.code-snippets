{
	// time module
	"snippet.aixt.time.sleep": {
		"prefix": "tim",
		"body": "time.${1|sleep,sleep_ms,sleep_us|}(${2:time})",
		"description": "Time functions"
	},
	// pin module
	"snippet.aixt.pin.setup": {
		"prefix": "st",
		"body": "pin.setup(pin.${1|gp0,gp1,gp2,gp3,gp4,gp5,gp6,gp7,gp8,gp9,gp10,gp11,gp12,gp13,gp14,gp15,gp16,gp17,gp18,gp19,gp20,gp21,gp22,gp23,gp24,gp25,gp26,gp27,gp28,gp29|}, pin.${2|input,output,in_pullup,in_pulldown|})",
		"description": "Pin setup level function"
	},
	"snippet.aixt.pin.high": {
		"prefix": "hi",
		"body": "pin.high(pin.${1|gp0,gp1,gp2,gp3,gp4,gp5,gp6,gp7,gp8,gp9,gp10,gp11,gp12,gp13,gp14,gp15,gp16,gp17,gp18,gp19,gp20,gp21,gp22,gp23,gp24,gp25,gp26,gp27,gp28,gp29|})",
		"description": "Pin high level function"
	},
	"snippet.aixt.pin.low": {
		"prefix": "lo",
		"body": "pin.low(pin.${1|gp0,gp1,gp2,gp3,gp4,gp5,gp6,gp7,gp8,gp9,gp10,gp11,gp12,gp13,gp14,gp15,gp16,gp17,gp18,gp19,gp20,gp21,gp22,gp23,gp24,gp25,gp26,gp27,gp28,gp29|})",
		"description": "Pin low level function"
	},
	// "snippet.aixt.pin.toggle": {
	// 	"prefix": "to",
	// 	"body": "pin.toggle(pin.${1|gp0,gp1,gp2,gp3,gp4,gp5,gp6,gp7,gp8,gp9,gp10,gp11,gp12,gp13,gp14,gp15,gp16,gp17,gp18,gp19,gp20,gp21,gp22,gp23,gp24,gp25,gp26,gp27,gp28,gp29|})",
	// 	"description": "Pin toggle level function"
	// },
	"snippet.aixt.pin.write": {
		"prefix": "wr",
		"body": "pin.write(pin.${1|gp0,gp1,gp2,gp3,gp4,gp5,gp6,gp7,gp8,gp9,gp10,gp11,gp12,gp13,gp14,gp15,gp16,gp17,gp18,gp19,gp20,gp21,gp22,gp23,gp24,gp25,gp26,gp27,gp28,gp29|}, ${2:1})",
		"description": "Pin writing function"
	},
	"snippet.aixt.pin.read": {
		"prefix": "rd",
		"body": "pin.read(pin.${1|gp0,gp1,gp2,gp3,gp4,gp5,gp6,gp7,gp8,gp9,gp10,gp11,gp12,gp13,gp14,gp15,gp16,gp17,gp18,gp19,gp20,gp21,gp22,gp23,gp24,gp25,gp26,gp27,gp28,gp29|})",
		"description": "pin reading function"
	},
	// port module
	"snippet.aixt.port.setup": {
		"prefix": "stp",
		"body": "port.setup(port.${1|b,c,d|}, ${2:byte})",
		"description": "8-bit port setup function"
	},
	"snippet.aixt.port.read": {
		"prefix": "rdp",
		"body": "port.read(port.${1|b,c,d|})",
		"description": "8-bit port reading function"
	},
	"snippet.aixt.port.write": {
		"prefix": "wrp",
		"body": "port.write(port.${1|b,c,d|}, ${2:byte})",
		"description": "8-bit port writing function"
	},
	// adc module
	"snippet.aixt.adc.setup": {
		"prefix": "sta",
		"body": "adc.setup(${1|12,10|})",
		"description": "ADC setup resolution"
	},
	"snippet.aixt.adc.read": {
		"prefix": "rda",
		"body": "adc.read(adc.${1|ch0,ch1,ch2,ch3,ch4|})",
		"description": "ADC reading function"
	},
	// pwm module
	"snippet.aixt.pwm.write": {
		"prefix": "wrpw",
		"body": "pwm.write(${1|gp0,gp1,gp2,gp3,gp4,gp5,gp6,gp7,gp8,gp9,gp10,gp11,gp12,gp13,gp14,gp15,gp16,gp17,gp18,gp19,gp20,gp21,gp22,gp23,gp24,gp25,gp26,gp27,gp28,gp29|}, ${2:duty})",
		"description": "PWM writing function"
	},
	// uart module
	"snippet.aixt.uart.setup": {
		"prefix": "stu",
		"body": "${1|uart,uart1|}.setup(${2|300,600,1200,2400,4800,9600,14400,19200,28800,31250,38400,57600,115200|})",
		"description": "UART character writing function"
	},
	"snippet.aixt.uart.write": {
		"prefix": "wru",
		"body": "${1|uart,uart1|}.write($2)",
		"description": "UART character writing function"
	},
	"snippet.aixt.uart.print": {
		"prefix": "pru",
		"body": "${1|uart,uart1|}.print($2)",
		"description": "UART printing string function"
	},
	"snippet.aixt.uart.println": {
		"prefix": "prlu",
		"body": "${1|uart,uart1|}.println($2)",
		"description": "UART printing string + line new function"
	},
	"snippet.aixt.uart.read": {
		"prefix": "rdu",
		"body": "${1|uart,uart1|}.read()",
		"description": "UART character reading function"
	},
	"snippet.aixt.uart.input": {
		"prefix": "inu",
		"body": "${1|uart,uart1|}.input(${2:message})",
		"description": "UART capturing string function"
	},
  }